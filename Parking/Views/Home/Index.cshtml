@model Parking.Models.IndexViewModel

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
</head>
<body>
    <header class="d-flex justify-content-between align-items-center p-3 bg-dark text-white">
        <div class="d-flex align-items-center">
            <img src="~/images/logo.jpg" alt="Logo" class="me-3" />
            <div>
                <h1>Estacionamento</h1>
                <h2>Carro Bem Guardado</h2>
            </div>
        </div>
        <div class="d-flex flex-column align-items-end">
            <p id="date-time" class="mb-2"></p>
            <a href="@Url.Action("Index", "PriceTables")" class="btn btn-light">Cadastrar Preço</a>
        </div>
    </header>

    <div class="container mt-4">
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger" role="alert">
                @Html.ValidationSummary(false, "", new { @class = "text-danger" })
            </div>
        }

        @await Html.PartialAsync("~/Views/VehicleRegistrations/_VehicleEntryForm.cshtml", Model.VehicleRegistration)

        @await Html.PartialAsync("~/Views/VehicleRegistrations/_VehicleExitForm.cshtml", Model.VehicleRegistration)

        @await Html.PartialAsync("~/Views/VehicleRegistrations/_VehicleRegistrationsTable.cshtml", Model.VehicleRegistrations)
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js"></script>
    <script>
        function updateDateTime() {
            const now = new Date();
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' };
            document.getElementById('date-time').textContent = now.toLocaleDateString('pt-BR', options);
        }
        setInterval(updateDateTime, 1000);
        updateDateTime();
    </script>

    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            const plateInputs = document.querySelectorAll('input[name="LicensePlate"]');

            function formatLicensePlate(value) {
                // Remove all non-alphanumeric characters
                value = value.replace(/[^a-zA-Z0-9]/g, '');
                // Format as XXX-0000
                if (value.length > 3) {
                    value = value.slice(0, 3) + '-' + value.slice(3, 7);
                }
                return value;
            }

            // Iterating over all LicensePlate input fields
            plateInputs.forEach(function (plateInput) {
                plateInput.addEventListener('input', function () {
                    let value = plateInput.value;
                    plateInput.value = formatLicensePlate(value).toUpperCase();
                });

                // Force uppercase styling
                plateInput.style.textTransform = 'uppercase';
            });
        });

    </script>
</body>
</html>
